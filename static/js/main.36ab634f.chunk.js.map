{"version":3,"sources":["logo.svg","components/Vertex.js","components/Edge.js","components/Frame.js","components/Graph.js","components/Layout.js","components/utils.js","pages/kruskal.js","pages/bfs.js","pages/home.js","pages/dfs.js","pages/prim.js","pages/dijkstra.js","pages/routes.js","App.js","reportWebVitals.js","index.js"],"names":["INF","Number","MAX_SAFE_INTEGER","COLOR","Vertex","x","y","color","num","this","d","radius","Edge","v1","v2","weight","x1","x2","y1","y2","Frame","vertexCount","edgeCount","vertexesCount","vertexesColor","Array","edgesColor","distance","instruction","execution","i","Graph","n","mat","visited","dist","j","prototype","drawVertex","context","save","beginPath","arc","closePath","fillStyle","fill","font","textAlign","textBaseline","fillText","restore","drawEdge","moveTo","lineTo","strokeStyle","stroke","record","recordDistance","insert","edges","forEach","value","index","array","Layout","children","Container","fluid","className","Navbar","expand","variant","bg","Brand","Row","Col","md","ListGroup","Item","action","to","style","textDecoration","dfs","v","stack","push","length","top","flag","pop","getDistance","line","Math","sqrt","pow","floor","canvasWidth","canvasHeight","Kruskal","useState","setInstruction","setExecution","vertexes","setVertexes","setEdges","animation","count","isDown","dragTarget","dragEdge","startX","startY","ctx","canvas","useRef","edge","vertexe1","vertexe2","useEffect","canvasEle","current","width","height","getContext","clearRect","draw","drawFrame","handleMouseUp","e","kEdge","begin","end","find","parent","getEdge","ButtonGroup","Button","onClick","event","newVertex","random","DropdownButton","as","title","placeholder","onChange","target","Dropdown","connected","k","graph","frame","m","execution_","instruction_","kEdges","sort","e1","e2","v1Color","v2Color","timer","setInterval","clearInterval","animate","ref","onMouseDown","parseInt","nativeEvent","offsetX","clientLeft","offsetY","clientTop","isTarget","circle","containsPoint","onMouseMove","mouseX","mouseY","dx","dy","onMouseUp","onMouseOut","type","min","defaultValue","id","onInput","max","dangerouslySetInnerHTML","__html","BFS","sourcePoint","queue","result","head","join","headColor","shift","HomePage","DFS","topColor","Prim","setAnimation","minEdges","minDist","minVertex","Dijkstra","path","temp","TheRoutes","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.36ab634f.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\n\r\nexport const INF = Number.MAX_SAFE_INTEGER\r\n\r\n\r\nexport const COLOR = {\r\n    PINK: '#eaa0bd',\r\n    GREY: '#383e3e',\r\n    YELLOW: '#eef386',\r\n    BLUE: '#5897ff',\r\n    GREEN: '#6caa52',\r\n    RED: '#e73688'\r\n}\r\n\r\n\r\nexport function Vertex(x, y, color, num) {\r\n    this.x = x\r\n    this.y = y\r\n    this.num = num\r\n    this.color = color\r\n    this.d = -1\r\n    this.radius = 20\r\n}\r\n\r\nVertex.prototype.drawVertex = function (context) {\r\n    context.save()\r\n    context.beginPath()\r\n    context.arc(this.x, this.y, this.radius, 0, 360)\r\n    context.closePath()\r\n\r\n    context.fillStyle = this.color\r\n    context.fill()\r\n\r\n    context.fillStyle = \"black\"\r\n    context.font = \"25px serif\"\r\n    context.textAlign = \"center\"\r\n    context.textBaseline = \"middle\"\r\n    context.fillText(this.num, this.x, this.y)\r\n    context.font = \"20px serif\"\r\n    if(this.d != -1){\r\n        if (this.d == INF)\r\n            context.fillText(\"∞\", this.x + 20, this.y + 20)\r\n        else\r\n            context.fillText(this.d, this.x + 20, this.y + 20)\r\n    }\r\n    context.restore()\r\n}","import React from 'react';\r\n\r\nexport function Edge(v1, v2, weight, color) {\r\n    this.v1 = v1.num\r\n    this.v2 = v2.num\r\n    this.x1 = v1.x\r\n    this.x2 = v2.x\r\n    this.y1 = v1.y\r\n    this.y2 = v2.y\r\n    this.weight = weight\r\n    this.color = color\r\n}\r\nEdge.prototype.drawEdge = function(context) {\r\n    context.save()\r\n    context.beginPath()\r\n    context.moveTo(this.x1,this.y1)\r\n    context.lineTo(this.x2,this.y2)\r\n    context.closePath()\r\n    context.strokeStyle = this.color\r\n    context.stroke()\r\n    let x = (this.x1+this.x2)/2\r\n    let y = (this.y1+this.y2)/2\r\n    context.fillStyle = \"black\"\r\n    context.font = \"20px serif\"\r\n    context.textAlign = \"left\"\r\n    context.textBaseline = \"alphabetic\"\r\n    context.fillText(this.weight,x,y)\r\n    context.restore()\r\n}","import React from 'react';\r\nimport {COLOR} from \"./Vertex\";\r\n\r\nexport function Frame(vertexCount, edgeCount) {\r\n    this.vertexesCount = vertexCount\r\n    this.edgeCount = edgeCount\r\n    this.vertexesColor = new Array(vertexCount)\r\n    this.edgesColor = new Array(edgeCount)\r\n    this.distance = new Array(vertexCount)\r\n    this.instruction = \" \"\r\n    this.execution = \"<br>\"\r\n    for(let i = 0; i < vertexCount; i++) {\r\n        this.vertexesColor[i] = COLOR.PINK\r\n    }\r\n    for(let i = 0; i < edgeCount; i++) {\r\n        this.edgesColor[i] = COLOR.GREY\r\n    }\r\n    for(let i = 0; i < vertexCount; i++) {\r\n        this.distance[i] = -1\r\n    }\r\n}\r\nFrame.prototype.record = function (vertexesColor,edgesColor,instruction,execution) {\r\n    for(let i = 0; i < this.vertexesCount; i++) {\r\n        this.vertexesColor[i] = vertexesColor[i]\r\n    }\r\n    for(let i = 0; i < this.edgeCount; i++) {\r\n        this.edgesColor[i] = edgesColor[i]\r\n    }\r\n    this.instruction = instruction\r\n    this.execution = execution\r\n}\r\nFrame.prototype.recordDistance = function (distance) {\r\n    for(let i = 0; i < this.vertexesCount; i++) {\r\n        this.distance[i] = distance[i]\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {INF} from './Vertex';\r\n\r\nexport function Graph(n) {\r\n    this.mat = new Array(n)\r\n    this.visited = new Array(n)\r\n    this.dist = new Array(n)\r\n    this.n = n\r\n    for(let i = 0; i < n; i++) {\r\n        this.mat[i] = new Array(n)\r\n        for(let j = 0; j < n; j++) {\r\n            this.mat[i][j] = INF\r\n        }\r\n    }\r\n    for(let i = 0; i < n; i++) {\r\n        this.visited[i] = 0\r\n        this.dist[i] = INF\r\n    }\r\n}\r\n\r\nGraph.prototype.insert = function (edges) {\r\n    edges.forEach((value,index,array)=>{\r\n        let x = array[index].v1\r\n        let y = array[index].v2\r\n        let weight = array[index].weight\r\n        this.mat[x][y] = weight\r\n        this.mat[y][x] = weight\r\n    })\r\n}\r\n","import React from \"react\";\r\nimport {ListGroup, ListGroupItem} from \"react-bootstrap\";\r\nimport {Container,Row,Col,Navbar} from \"react-bootstrap\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nexport const Layout = ({ children }) => {\r\n    return (\r\n\r\n        <Container fluid className=\"no-gutter p-0\">\r\n                <Navbar expand=\"lg\" variant=\"light\" bg=\"light\">\r\n                    <Container>\r\n                        <Navbar.Brand >Graph Algorithm Visualizer</Navbar.Brand>\r\n                    </Container>\r\n                </Navbar>\r\n            <Row className=\"no-gutter\">\r\n                <Col md={2} className=\"bg-secondary bg-opacity-75\">\r\n                    <ListGroup variant=\"flush p-3\" >\r\n                        <ListGroup.Item action className=\"list-group-item-secondary\">\r\n                            <Link to=\"/\" style={{color:'black',textDecoration:'none'}}> Home </Link>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item action className=\"list-group-item-secondary\">\r\n                            <Link to=\"/bfs\" style={{color:'black',textDecoration:'none'}}> Breadth-first search </Link>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item action className=\"list-group-item-secondary\">\r\n                            <Link to=\"/dfs\" style={{color:'black',textDecoration:'none'}}> Depth-first search </Link>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item action className=\"list-group-item-secondary\">\r\n                            <Link to=\"/dijkstra\" style={{color:'black',textDecoration:'none'}}> Dijkstra's algorithm </Link>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item action className=\"list-group-item-secondary\">\r\n                            <Link to=\"/kruskal\" style={{color:'black',textDecoration:'none'}}> Kruskal's algorithm </Link>\r\n                        </ListGroup.Item>\r\n                        <ListGroup.Item action className=\"list-group-item-secondary\">\r\n                            <Link to=\"/prim\" style={{color:'black',textDecoration:'none'}}> Prim's algorithm </Link>\r\n                        </ListGroup.Item>\r\n\r\n\r\n                    </ListGroup>\r\n                </Col>\r\n                <Col md={10}>{children}</Col>\r\n\r\n            </Row>\r\n        </Container>\r\n    );\r\n};","import React from 'react';\r\nimport {INF} from './Vertex'\r\nexport function dfs(v,visited,mat,n) {\r\n    let stack = []\r\n    stack.push(v)\r\n    visited[v] = 1\r\n    while(stack.length != 0) {\r\n        let top = stack[stack.length-1]\r\n        let flag = 0\r\n        for(let i = 0; i < n; i++) {\r\n            if((mat[top][i]!=INF && visited[i]) || mat[top][i]==INF) {\r\n                flag++\r\n            }\r\n        }\r\n        if(flag == n) {\r\n            stack.pop()\r\n            if(stack.length!=0) top = stack[stack.length-1]\r\n        }\r\n        for(let i = 0; i < n; i++) {\r\n            if(!visited[i] && mat[top][i] != INF) {\r\n                stack.push(i)\r\n                visited[i] = 1\r\n                break\r\n            }\r\n        }\r\n    }\r\n    for(let i = 0; i < n; i++) {\r\n        if(!visited[i]) return 0\r\n    }\r\n    return 1\r\n}\r\nexport function getDistance(line) {\r\n    let distance = Math.sqrt(Math.pow((line.x1-line.x2),2)+Math.pow((line.y1-line.y2),2))\r\n    return Math.floor(distance/10)\r\n}\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Vertex} from \"../components/Vertex\";\r\nimport {Edge} from \"../components/Edge\";\r\nimport {Frame} from \"../components/Frame\";\r\nimport {Graph} from \"../components/Graph\";\r\nimport {COLOR} from \"../components/Vertex\";\r\nimport {INF} from \"../components/Vertex\";\r\nimport {Layout} from \"../components/Layout\";\r\nimport {ButtonGroup, Button, Dropdown, DropdownButton, Container,Row,Col} from \"react-bootstrap\";\r\nimport {dfs,getDistance} from \"../components/utils\";\r\n\r\nexport const canvasWidth = 600;\r\nexport const canvasHeight = 300;\r\n\r\nconst Kruskal = () => {\r\n    const [instruction, setInstruction] = useState(\" \");\r\n    const [execution, setExecution] = useState(\" \");\r\n    const [vertexes, setVertexes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [animation,setAnimation] = useState([]);\r\n    let count = 0;\r\n    let isDown = false;\r\n    let dragTarget = null;\r\n    let dragEdge = [];\r\n    let startX = null;\r\n    let startY = null;\r\n    let ctx = null;\r\n    /*let vertexes = [];\r\n    let edges = [];*/\r\n    let randX = canvasWidth - 200\r\n    let randY = canvasHeight - 200\r\n    const canvas = useRef(null);\r\n    let edge = {vertexe1:null, vertexe2:null, weight:null}\r\n\r\n    useEffect(()=>{\r\n        const canvasEle = canvas.current;\r\n        canvasEle.width = canvasWidth;\r\n        canvasEle.height = canvasHeight;\r\n\r\n        // get context of the canvas\r\n        ctx = canvasEle.getContext(\"2d\");\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    });\r\n\r\n/*    useEffect(() => {\r\n        draw();\r\n    }, []);*/\r\n\r\n    const draw = () => {\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n    let drawFrame = function (i,animation) {\r\n        animation[i].edgesColor.forEach((value, index, array)=>{\r\n            edges[index].color = value\r\n        })\r\n        animation[i].vertexesColor.forEach((value, index, array)=>{\r\n            vertexes[index].color = value\r\n        })\r\n        animation[i].distance.forEach((value, index, array)=>{\r\n            vertexes[index].d = value\r\n        })\r\n        setInstruction(animation[i].instruction);\r\n        setExecution(animation[i].execution);\r\n        setVertexes(vertexes);\r\n        setEdges(edges);\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n\r\n    function animate(animation) {\r\n        let index = 0;\r\n        let timer = setInterval(frame, 500)\r\n        function frame() {\r\n            if (index == animation.length) {\r\n                clearInterval(timer)\r\n            } else {\r\n                drawFrame(index,animation)\r\n                //draw()\r\n                index++\r\n            }\r\n        }\r\n    }\r\n\r\n    const containsPoint = (x, y) => {\r\n        let isTarget = null;\r\n        for (let i = 0; i < vertexes.length; i++) {\r\n            const circle = vertexes[i];\r\n            let distance = Math.sqrt(Math.pow((circle.x-x),2)+Math.pow((circle.y-y),2))\r\n            if(distance < circle.radius*3/2) {\r\n                dragTarget = circle;\r\n                for(let j = 0; j < edges.length; j++) {\r\n                    if(edges[j].v1 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 1});\r\n                    if(edges[j].v2 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 2});\r\n                }\r\n                isTarget = true;\r\n                break;\r\n            }\r\n        }\r\n        return isTarget;\r\n    }\r\n\r\n    const handleCanvasClick=(event)=>{\r\n        const X = Math.random()*(randX)+100;\r\n        const Y = Math.random()*(randY)+100;\r\n        const newVertex = new Vertex(X,Y,COLOR.PINK,vertexes.length)\r\n        vertexes.push(newVertex);\r\n        draw();\r\n    };\r\n\r\n    const handleMouseMove = (event)=>{\r\n        if (!isDown) return;\r\n        const mouseX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        const mouseY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        const dx = mouseX - startX;\r\n        const dy = mouseY - startY;\r\n        startX = mouseX;\r\n        startY = mouseY;\r\n        dragTarget.x += dx;\r\n        dragTarget.y += dy;\r\n        if(dragEdge.length != 0){\r\n            for(let i = 0; i < dragEdge.length; i++) {\r\n                if (dragEdge[i].v == 1) {\r\n                    edges[dragEdge[i].num].x1 += dx;\r\n                    edges[dragEdge[i].num].y1 += dy;\r\n                }\r\n                if (dragEdge[i].v == 2) {\r\n                    edges[dragEdge[i].num].x2 += dx;\r\n                    edges[dragEdge[i].num].y2 += dy;\r\n                }\r\n            }\r\n        }\r\n        draw();\r\n    };\r\n\r\n    const handleMouseDown = (event)=>{\r\n        startX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        startY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        isDown = containsPoint(startX,startY)\r\n    };\r\n\r\n    const handleMouseUp = e => {\r\n        dragTarget = null;\r\n        dragEdge = [];\r\n        isDown = false;\r\n    }\r\n    const handleMouseOut = e => {\r\n        handleMouseUp(e);\r\n    }\r\n\r\n    const handleClearCanvas=(event)=>{\r\n        setVertexes([]);\r\n        setEdges([]);\r\n        setExecution(\" \");\r\n        setInstruction(\" \");\r\n    };\r\n\r\n    const inputChange1=(event)=>{\r\n        edge.vertexe1 = event.target.value;\r\n    };\r\n    const inputChange2=(event)=>{\r\n        edge.vertexe2 = event.target.value;\r\n    };\r\n    const inputChange3=(event)=>{\r\n        edge.weight = event.target.value;\r\n    };\r\n    const inputChange4=(event)=>{\r\n        count = event.target.value;\r\n    };\r\n    const sliderChange=(event)=>{\r\n        if(animation.length > 0) {\r\n            event.target.max = animation.length - 1;\r\n            drawFrame(event.target.value,animation);\r\n        }\r\n    };\r\n    const realDistance=(event)=>{\r\n        edges.forEach((value, index, array)=>{\r\n            array[index].weight = getDistance(array[index])\r\n        })\r\n        setEdges(edges);\r\n        draw()\r\n    }\r\n    const handleGraphClick = (event)=>{\r\n        for(let i = 0; i < count; i++) {\r\n            vertexes.push(new Vertex(Math.random()*(randX)+100,Math.random()*(randY)+100,COLOR.PINK,vertexes.length))\r\n        }\r\n        let connected = 0\r\n        while(!connected) {\r\n            let flag = 1\r\n            for(let j = 0; j < Math.floor(Math.random()*(vertexes.length*5)); j++) {\r\n                let v1 = Math.floor(Math.random()*vertexes.length)\r\n                let v2 = Math.floor(Math.random()*vertexes.length)\r\n                let weight = Math.floor(Math.random()*100+1)\r\n                for(let k = 0; k < edges.length; k++) {\r\n                    if ((edges[k].v1 == v1 || edges[k].v1 == v2)\r\n                        && (edges[k].v2 == v1 || edges[k].v2 == v2)) {\r\n                        flag = 0\r\n                        break\r\n                    }\r\n                }\r\n                if(!(v1 == v2) && flag){\r\n                    edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n                }\r\n            }\r\n            let graph = new Graph(vertexes.length)\r\n            graph.insert(edges)\r\n            connected = dfs(0,graph.visited,graph.mat,graph.n)\r\n        }\r\n        draw()\r\n    }\r\n    const handleEdgeClick = (event)=>{\r\n        let v1 = edge.vertexe1;\r\n        let v2 = edge.vertexe2;\r\n        let weight = edge.weight;\r\n        edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n        draw();\r\n    };\r\n    function kEdge() {\r\n        this.begin = 0\r\n        this.end = 0\r\n        this.weight = 0\r\n    }\r\n    function find(parent, n) {\r\n        while(parent[n] > 0) {\r\n            n = parent[n]\r\n        }\r\n        return n\r\n    }\r\n    let getEdge = function (v1,v2,edges) {\r\n        let num\r\n        edges.forEach((value, index, array)=>{\r\n            if((array[index].v1 == v1 || array[index].v1 == v2)\r\n                && (array[index].v2 == v1 || array[index].v2 == v2)) {\r\n                num = index\r\n            }\r\n        })\r\n        return num\r\n    }\r\n\r\n    const kruskal = ()=>{\r\n        let frame\r\n        let execution_ = \"<br>\"\r\n        let instruction_ = \"Edges: \"\r\n\r\n        let n, m\r\n        let graph = new Graph(vertexes.length)\r\n        let parent = []\r\n        let vertexesColor = new Array(vertexes.length)\r\n        let edgesColor = new Array(edges.length)\r\n        for(let i = 0; i < vertexes.length; i++) {\r\n            vertexesColor[i] = COLOR.PINK\r\n        }\r\n        for(let i = 0; i < edges.length; i++) {\r\n            edgesColor[i] = COLOR.GREY\r\n        }\r\n        graph.insert(edges)\r\n/*        if(graph.n < 2) {\r\n            alert(\"Graph does not exist\")\r\n            return\r\n        }\r\n        let connected = utils.dfs(0,graph.visited,graph.mat,graph.n)\r\n        if(!connected) {\r\n            alert(\"Graph is not connected\")\r\n            return\r\n        }\r\n        disableButtons()*/\r\n        animation.push(new Frame(vertexes.length,edges.length))\r\n        let kEdges = []\r\n        for(let i = 0; i < graph.n; i++) {\r\n            parent[i] = 0\r\n        }\r\n        for(let i = 0; i < graph.n; i++) {\r\n            for(let j = i; j < graph.n; j++) {\r\n                if(graph.mat[i][j] < INF) {\r\n                    let edge = new kEdge();\r\n                    edge.begin = i\r\n                    edge.end = j\r\n                    edge.weight = graph.mat[i][j]\r\n                    kEdges.push(edge)\r\n                }\r\n            }\r\n        }\r\n        kEdges.sort((e1,e2)=>{\r\n            return e1.weight - e2.weight\r\n        })\r\n\r\n        execution_ += \"Sort edges by increasing weight<br/><br/>\"\r\n\r\n        for(let i = 0; i < kEdges.length; i++) {\r\n            n = find(parent,kEdges[i].begin)\r\n            m = find(parent,kEdges[i].end)\r\n\r\n            let v1Color = vertexesColor[kEdges[i].begin]\r\n            let v2Color = vertexesColor[kEdges[i].end]\r\n            vertexesColor[kEdges[i].begin] = COLOR.YELLOW\r\n            vertexesColor[kEdges[i].end] = COLOR.YELLOW\r\n            edgesColor[getEdge(kEdges[i].begin,kEdges[i].end,edges)]=COLOR.YELLOW\r\n            execution_ += \"For edge \"+kEdges[i].begin+\"--\"+kEdges[i].end+\"<br/>\"\r\n            frame = new Frame(vertexes.length,edges.length)\r\n            frame.record(vertexesColor,edgesColor,instruction_,execution_)\r\n            animation.push(frame)\r\n\r\n            if(n != m) {\r\n                parent[n] = m\r\n\r\n                edgesColor[getEdge(kEdges[i].begin,kEdges[i].end,edges)]=COLOR.GREEN\r\n                vertexesColor[kEdges[i].begin] = COLOR.GREEN\r\n                vertexesColor[kEdges[i].end] = COLOR.GREEN\r\n                execution_ +=\"Adding edge \"+kEdges[i].begin+\"--\"+kEdges[i].end+\r\n                    \" does not form a cycle <br/> Add edge \"+kEdges[i].begin+\"--\"+kEdges[i].end+\"<br/>\"\r\n                instruction_ += kEdges[i].begin+\"--\"+kEdges[i].end+\" \"\r\n                frame = new Frame(vertexes.length,edges.length)\r\n                frame.record(vertexesColor,edgesColor,instruction_,execution_)\r\n                animation.push(frame)\r\n\r\n            }else {\r\n\r\n                vertexesColor[kEdges[i].begin] = v1Color\r\n                vertexesColor[kEdges[i].end] = v2Color\r\n                edgesColor[getEdge(kEdges[i].begin,kEdges[i].end,edges)]=COLOR.GREY\r\n                execution_ += \"Adding edge \"+kEdges[i].begin+\"--\"+kEdges[i].end+\r\n                    \" will form a cycle<br/>Ignore the edge<br/>\"\r\n                frame = new Frame(vertexes.length,edges.length)\r\n                frame.record(vertexesColor,edgesColor,instruction_,execution_)\r\n                animation.push(frame)\r\n            }\r\n            execution_+=\"<br/>\"\r\n        }\r\n        animate(animation);\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Row className=\"no-gutter\">\r\n                <Col md={7} className=\"bg-secondary bg-opacity-10\">\r\n                    <ButtonGroup aria-label=\"Basic example\" className=\"p-2\">\r\n                            <Button variant=\"secondary\" onClick={handleClearCanvas}>CLEAR</Button>\r\n                            <Button variant=\"secondary\" onClick={handleCanvasClick}>VERTEX</Button>\r\n                            <DropdownButton as={ButtonGroup} title=\"EDGE\" variant=\"secondary\">\r\n                                <input placeholder=\"vertex1\" onChange={inputChange1}/>\r\n                                <input placeholder=\"vertex2\" onChange={inputChange2}/>\r\n                                <input placeholder=\"weight\" onChange={inputChange3}/>\r\n                                <Dropdown.Item onClick={handleEdgeClick}>GENERATE</Dropdown.Item>\r\n                            </DropdownButton>\r\n                            <DropdownButton as={ButtonGroup} title=\"GRAPH\" variant=\"secondary\">\r\n                                <input placeholder=\"count\" onChange={inputChange4}/>\r\n                                <Dropdown.Item onClick={handleGraphClick}>GENERATE</Dropdown.Item>\r\n                            </DropdownButton>\r\n\r\n                            <Button variant=\"secondary\" onClick={realDistance}>REAL DISTANCE</Button>\r\n                            <Button variant=\"secondary\" onClick={kruskal}>ANIMATION</Button>\r\n                        </ButtonGroup>\r\n                        <div>\r\n                            <canvas\r\n                                className=\"App-canvas\"\r\n                                ref={canvas}\r\n                                width={canvasWidth}\r\n                                height={canvasHeight}\r\n                                onMouseDown={handleMouseDown}\r\n                                onMouseMove={handleMouseMove}\r\n                                onMouseUp={handleMouseUp}\r\n                                onMouseOut={handleMouseOut}/>\r\n                            <div className=\"text-center\">\r\n                                <input type=\"range\" min={0} defaultValue={0} className=\"p-3 slider\" id=\"slider\" onInput={sliderChange}/>\r\n                            </div>\r\n                        </div>\r\n                    <div className=\"bg-secondary bg-opacity-10\">\r\n                        <div id=\"instruction\" dangerouslySetInnerHTML={{__html:instruction}}></div>\r\n                        <div id=\"execution\" dangerouslySetInnerHTML={{__html:execution}}></div>\r\n                    </div>\r\n                    </Col>\r\n                    <Col md={5} className=\"bg-secondary bg-opacity-25\">\r\n                        <div className=\"bg-secondary bg-opacity-25\">\r\n                            <h3 className=\"text-secondary p-3\">Kruskal's algorithm</h3>\r\n                        </div>\r\n                        <div id=\"code\">\r\n                        <pre className=\"p-3\">\r\n    {`\r\nfunction kruskal(graph) {\r\n    let n, m\r\n    let parent = []\r\n    let kEdges = []\r\n    for(let i = 0; i < graph.n; i++) {\r\n        parent[i] = 0\r\n    }\r\n    for(let i = 0; i < graph.n; i++) {\r\n        for(let j = i; j < graph.n; j++) {\r\n            if(graph.mat[i][j] < INF) {\r\n                let edge = new kEdge();\r\n                edge.begin = i\r\n                edge.end = j\r\n                edge.weight = graph.mat[i][j]\r\n                kEdges.push(edge)\r\n            }\r\n        }\r\n    }\r\n    kEdges.sort((e1,e2)=>{\r\n        return e1.weight - e2.weight\r\n    })\r\n    for(let i = 0; i < kEdges.length; i++) {\r\n        n = find(parent,kEdges[i].begin)\r\n        m = find(parent,kEdges[i].end)\r\n        if(n != m) {\r\n            parent[n] = m\r\n        }\r\n    }\r\n}\r\nfunction kEdge() {\r\n    this.begin = 0\r\n    this.end = 0\r\n    this.weight = 0\r\n}\r\nfunction find(parent, n) {\r\n    while(parent[n] > 0) {\r\n        n = parent[n]\r\n    }\r\n    return n\r\n}\r\n    `}\r\n</pre>\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Kruskal;","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Vertex} from \"../components/Vertex\";\r\nimport {Edge} from \"../components/Edge\";\r\nimport {Frame} from \"../components/Frame\";\r\nimport {Graph} from \"../components/Graph\";\r\nimport {COLOR} from \"../components/Vertex\";\r\nimport {INF} from \"../components/Vertex\";\r\nimport {Layout} from \"../components/Layout\";\r\nimport {ButtonGroup, Button, Dropdown, DropdownButton, Container,Row,Col} from \"react-bootstrap\";\r\nimport {dfs, getDistance} from \"../components/utils\";\r\n\r\nexport const canvasWidth = 600;\r\nexport const canvasHeight = 300;\r\n\r\nconst BFS = () => {\r\n    const [instruction, setInstruction] = useState(\" \");\r\n    const [execution, setExecution] = useState(\" \");\r\n    const [vertexes, setVertexes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [animation,setAnimation] = useState([]);\r\n    let sourcePoint = 0;\r\n    let count = 0;\r\n    let isDown = false;\r\n    let dragTarget = null;\r\n    let dragEdge = [];\r\n    let startX = null;\r\n    let startY = null;\r\n    let ctx = null;\r\n    /*let vertexes = [];\r\n    let edges = [];*/\r\n    let randX = canvasWidth - 200\r\n    let randY = canvasHeight - 200\r\n    const canvas = useRef(null);\r\n    let edge = {vertexe1:null, vertexe2:null, weight:null}\r\n\r\n    useEffect(()=>{\r\n        const canvasEle = canvas.current;\r\n        canvasEle.width = canvasWidth;\r\n        canvasEle.height = canvasHeight;\r\n\r\n        // get context of the canvas\r\n        ctx = canvasEle.getContext(\"2d\");\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    });\r\n\r\n    /*    useEffect(() => {\r\n            draw();\r\n        }, []);*/\r\n\r\n    const draw = () => {\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n    let drawFrame = function (i,animation) {\r\n        animation[i].edgesColor.forEach((value, index, array)=>{\r\n            edges[index].color = value\r\n        })\r\n        animation[i].vertexesColor.forEach((value, index, array)=>{\r\n            vertexes[index].color = value\r\n        })\r\n        animation[i].distance.forEach((value, index, array)=>{\r\n            vertexes[index].d = value\r\n        })\r\n        setInstruction(animation[i].instruction);\r\n        setExecution(animation[i].execution);\r\n        setVertexes(vertexes);\r\n        setEdges(edges);\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n\r\n    function animate(animation) {\r\n        let index = 0;\r\n        let timer = setInterval(frame, 500)\r\n        function frame() {\r\n            if (index == animation.length) {\r\n                clearInterval(timer)\r\n            } else {\r\n                drawFrame(index,animation)\r\n                //draw()\r\n                index++\r\n            }\r\n        }\r\n    }\r\n\r\n    const containsPoint = (x, y) => {\r\n        let isTarget = null;\r\n        for (let i = 0; i < vertexes.length; i++) {\r\n            const circle = vertexes[i];\r\n            let distance = Math.sqrt(Math.pow((circle.x-x),2)+Math.pow((circle.y-y),2))\r\n            if(distance < circle.radius*3/2) {\r\n                dragTarget = circle;\r\n                for(let j = 0; j < edges.length; j++) {\r\n                    if(edges[j].v1 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 1});\r\n                    if(edges[j].v2 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 2});\r\n                }\r\n                isTarget = true;\r\n                break;\r\n            }\r\n        }\r\n        return isTarget;\r\n    }\r\n\r\n    const handleCanvasClick=(event)=>{\r\n        const X = Math.random()*(randX)+100;\r\n        const Y = Math.random()*(randY)+100;\r\n        const newVertex = new Vertex(X,Y,COLOR.PINK,vertexes.length)\r\n        vertexes.push(newVertex);\r\n        draw();\r\n    };\r\n\r\n    const handleMouseMove = (event)=>{\r\n        if (!isDown) return;\r\n        const mouseX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        const mouseY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        const dx = mouseX - startX;\r\n        const dy = mouseY - startY;\r\n        startX = mouseX;\r\n        startY = mouseY;\r\n        dragTarget.x += dx;\r\n        dragTarget.y += dy;\r\n        if(dragEdge.length != 0){\r\n            for(let i = 0; i < dragEdge.length; i++) {\r\n                if (dragEdge[i].v == 1) {\r\n                    edges[dragEdge[i].num].x1 += dx;\r\n                    edges[dragEdge[i].num].y1 += dy;\r\n                }\r\n                if (dragEdge[i].v == 2) {\r\n                    edges[dragEdge[i].num].x2 += dx;\r\n                    edges[dragEdge[i].num].y2 += dy;\r\n                }\r\n            }\r\n        }\r\n        draw();\r\n    };\r\n\r\n    const handleMouseDown = (event)=>{\r\n        startX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        startY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        isDown = containsPoint(startX,startY)\r\n    };\r\n\r\n    const handleMouseUp = e => {\r\n        dragTarget = null;\r\n        dragEdge = [];\r\n        isDown = false;\r\n    }\r\n    const handleMouseOut = e => {\r\n        handleMouseUp(e);\r\n    }\r\n\r\n    const handleClearCanvas=(event)=>{\r\n        setVertexes([]);\r\n        setEdges([]);\r\n        setExecution(\" \");\r\n        setInstruction(\" \");\r\n    };\r\n\r\n    const inputChange1=(event)=>{\r\n        edge.vertexe1 = event.target.value;\r\n    };\r\n    const inputChange2=(event)=>{\r\n        edge.vertexe2 = event.target.value;\r\n    };\r\n    const inputChange3=(event)=>{\r\n        edge.weight = event.target.value;\r\n    };\r\n    const inputChange4=(event)=>{\r\n        count = event.target.value;\r\n    };\r\n    const inputSourcePoint=(event)=>{\r\n        sourcePoint = event.target.value;\r\n    };\r\n    const sliderChange=(event)=>{\r\n        if(animation.length > 0) {\r\n            event.target.max = animation.length - 1;\r\n            drawFrame(event.target.value,animation);\r\n        }\r\n    };\r\n    const realDistance=(event)=>{\r\n        edges.forEach((value, index, array)=>{\r\n            array[index].weight = getDistance(array[index])\r\n        })\r\n        setEdges(edges);\r\n        draw()\r\n    }\r\n    const handleGraphClick = (event)=>{\r\n        for(let i = 0; i < count; i++) {\r\n            vertexes.push(new Vertex(Math.random()*(randX)+100,Math.random()*(randY)+100,COLOR.PINK,vertexes.length))\r\n        }\r\n        let connected = 0\r\n        while(!connected) {\r\n            let flag = 1\r\n            for(let j = 0; j < Math.floor(Math.random()*(vertexes.length*5)); j++) {\r\n                let v1 = Math.floor(Math.random()*vertexes.length)\r\n                let v2 = Math.floor(Math.random()*vertexes.length)\r\n                let weight = Math.floor(Math.random()*100+1)\r\n                for(let k = 0; k < edges.length; k++) {\r\n                    if ((edges[k].v1 == v1 || edges[k].v1 == v2)\r\n                        && (edges[k].v2 == v1 || edges[k].v2 == v2)) {\r\n                        flag = 0\r\n                        break\r\n                    }\r\n                }\r\n                if(!(v1 == v2) && flag){\r\n                    edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n                }\r\n            }\r\n            let graph = new Graph(vertexes.length)\r\n            graph.insert(edges)\r\n            connected = dfs(0,graph.visited,graph.mat,graph.n)\r\n        }\r\n        draw()\r\n    }\r\n    const handleEdgeClick = (event)=>{\r\n        let v1 = edge.vertexe1;\r\n        let v2 = edge.vertexe2;\r\n        let weight = edge.weight;\r\n        edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n        draw();\r\n    };\r\n    function kEdge() {\r\n        this.begin = 0\r\n        this.end = 0\r\n        this.weight = 0\r\n    }\r\n    function find(parent, n) {\r\n        while(parent[n] > 0) {\r\n            n = parent[n]\r\n        }\r\n        return n\r\n    }\r\n    let getEdge = function (v1,v2,edges) {\r\n        let num\r\n        edges.forEach((value, index, array)=>{\r\n            if((array[index].v1 == v1 || array[index].v1 == v2)\r\n                && (array[index].v2 == v1 || array[index].v2 == v2)) {\r\n                num = index\r\n            }\r\n        })\r\n        return num\r\n    }\r\n\r\n    const bfs = ()=>{\r\n        let frame\r\n        let execution = \"<br>\"\r\n        let instruction = \" \"\r\n        let v = sourcePoint;\r\n        let graph = new Graph(vertexes.length)\r\n        let queue = []\r\n        let result = []\r\n/*        if(v<0 || v>=vertexCount || isNaN(v)) {\r\n            alert(\"Vertex does not exist\")\r\n            return\r\n        }\r\n        if(graph.n == 0) {\r\n            alert(\"Graph does not exist\")\r\n            return\r\n        }*/\r\n        //disableButtons()\r\n        animation.push(new Frame(vertexes.length,edges.length))\r\n        let vertexesColor = new Array(vertexes.length)\r\n        let edgesColor = new Array(edges.length)\r\n        for(let i = 0; i < vertexes.length; i++) {\r\n            vertexesColor[i] = COLOR.PINK\r\n        }\r\n        for(let i = 0; i < edges.length; i++) {\r\n            edgesColor[i] = COLOR.GREY\r\n        }\r\n        graph.insert(edges)\r\n        queue.push(v)\r\n        result.push(v)\r\n        graph.visited[v] = 1\r\n        vertexesColor[v] = COLOR.GREEN\r\n        frame = new Frame(vertexes.length,edges.length)\r\n        frame.record(vertexesColor,edgesColor,instruction,execution)\r\n        animation.push(frame)\r\n        while(queue.length != 0) {\r\n            let head = queue[0]\r\n            let flag = 0\r\n            for(let i = 0; i < graph.n; i++) {\r\n                if(!graph.visited[i] && graph.mat[head][i]!=INF) {\r\n                    queue.push(i)\r\n                    instruction = \"queue \"+queue.join(\" | \")\r\n                    graph.visited[i] = 1\r\n                    result.push(i)\r\n                    execution+= i+\" is not visited, \"+\"visit \"+i+\"<br><br>\"\r\n                    vertexesColor[i]=COLOR.GREEN\r\n                    frame = new Frame(vertexes.length,edges.length)\r\n                    frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                    animation.push(frame)\r\n                }\r\n            }\r\n            let headColor = vertexesColor[head]\r\n            vertexesColor[head]=COLOR.RED\r\n            execution += \"visit the adjacent vertexes of \"+head+\"<br>\"\r\n            for(let i = 0; i < graph.n; i++) {\r\n                if((graph.mat[head][i]<INF && graph.visited[i])||graph.mat[head][i]==INF) {\r\n                    flag++\r\n                }\r\n                if(graph.mat[head][i]<INF && graph.visited[i]) {\r\n                    execution += i+\" is visited<br>\"\r\n                    let color = vertexesColor[i]\r\n                    vertexesColor[i] = COLOR.RED\r\n                    edgesColor[getEdge(head,i,edges)] = COLOR.RED\r\n                    frame = new Frame(vertexes.length,edges.length)\r\n                    frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                    animation.push(frame)\r\n\r\n                    vertexesColor[i]=color\r\n                    edgesColor[getEdge(head,i,edges)] = COLOR.GREY\r\n                    frame = new Frame(vertexes.length,edges.length)\r\n                    frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                    animation.push(frame)\r\n                }\r\n            }\r\n            vertexesColor[head] = headColor\r\n            frame = new Frame(vertexes.length,edges.length)\r\n            frame.record(vertexesColor,edgesColor,instruction,execution)\r\n            animation.push(frame)\r\n            if(flag==graph.n) {\r\n                queue.shift()\r\n                instruction = \"queue \"+queue.join(\" | \")\r\n                execution += \"All of the adjacent vertexes of \"+head+\" are visited<br><br>\"\r\n                if(queue.length != 0) head = queue[0]\r\n            }\r\n        }\r\n        instruction = \"visit order: \"+result.join(\" \")\r\n        frame = new Frame(vertexes.length,edges.length)\r\n        frame.record(vertexesColor,edgesColor,instruction,execution)\r\n        animation.push(frame)\r\n        animate(animation);\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Row className=\"no-gutter\">\r\n                <Col md={7} className=\"bg-secondary bg-opacity-10\">\r\n                    <ButtonGroup aria-label=\"Basic example\" className=\"p-2\">\r\n                        <Button variant=\"secondary\" onClick={handleClearCanvas}>CLEAR</Button>\r\n                        <Button variant=\"secondary\" onClick={handleCanvasClick}>VERTEX</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"EDGE\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" onChange={inputChange1}/>\r\n                            <input placeholder=\"vertex2\" onChange={inputChange2}/>\r\n                            <input placeholder=\"weight\" onChange={inputChange3}/>\r\n                            <Dropdown.Item onClick={handleEdgeClick}>GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <DropdownButton as={ButtonGroup} title=\"GRAPH\" variant=\"secondary\">\r\n                            <input placeholder=\"count\" onChange={inputChange4}/>\r\n                            <Dropdown.Item onClick={handleGraphClick}>GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <Button variant=\"secondary\" onClick={realDistance}>REAL DISTANCE</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"ANIMATION\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" onChange={inputSourcePoint}/>\r\n                            <Dropdown.Item onClick={bfs}>START</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </ButtonGroup>\r\n                    <div>\r\n                        <canvas\r\n                            className=\"App-canvas\"\r\n                            ref={canvas}\r\n                            width={canvasWidth}\r\n                            height={canvasHeight}\r\n                            onMouseDown={handleMouseDown}\r\n                            onMouseMove={handleMouseMove}\r\n                            onMouseUp={handleMouseUp}\r\n                            onMouseOut={handleMouseOut}/>\r\n                        <div className=\"text-center\">\r\n                            <input type=\"range\" min={0} defaultValue={0} className=\"p-3 slider\" id=\"slider\" onInput={sliderChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-secondary bg-opacity-10\">\r\n                        <div id=\"instruction\" dangerouslySetInnerHTML={{__html:instruction}}></div>\r\n                        <div id=\"execution\" dangerouslySetInnerHTML={{__html:execution}}></div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={5} className=\"bg-secondary bg-opacity-25\">\r\n                    <div className=\"bg-secondary bg-opacity-25\">\r\n                        <h3 className=\"text-secondary p-3\">Breadth-first search</h3>\r\n                    </div>\r\n                    <div id=\"code\">\r\n                        <pre className=\"p-3\">\r\n    {`\r\nfunction bfs(v,graph) {\r\n    let queue = []\r\n    queue.push(v)\r\n    graph.visited[v] = 1\r\n    while(queue.length != 0) {\r\n        let head = queue[0]\r\n        let flag = 0\r\n        for(let i = 0; i < graph.n; i++) {\r\n            if((graph.mat[head][i] < INF && graph.visited[i]) || graph.mat[head][i] == Infinity) {\r\n                flag++\r\n            }\r\n        }\r\n        if(flag == graph.n) {\r\n            queue.shift()\r\n            if(queue.length != 0) head = queue[0]\r\n        }\r\n        for(let i = 0; i < graph.n; i++) {\r\n            if(!graph.visited[i] && graph.mat[head][i] != Infinity) {\r\n                queue.push(i)\r\n                graph.visited[i] = 1\r\n                break\r\n            }\r\n        }\r\n    }\r\n}\r\n    `}\r\n</pre>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default BFS;\r\n","import React from 'react';\r\nimport {Layout} from \"../components/Layout\";\r\nimport {Button, ButtonGroup, Col, Dropdown, DropdownButton, Row} from \"react-bootstrap\";\r\nimport {canvasHeight, canvasWidth} from \"./bfs\";\r\n\r\nconst HomePage = () => {\r\n\r\n    return (\r\n        <Layout>\r\n            <Row className=\"no-gutter\">\r\n                <Col md={7} className=\"bg-secondary bg-opacity-10\">\r\n                    <ButtonGroup aria-label=\"Basic example\" className=\"p-2\">\r\n                        <Button variant=\"secondary\" >CLEAR</Button>\r\n                        <Button variant=\"secondary\" >VERTEX</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"EDGE\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" />\r\n                            <input placeholder=\"vertex2\" />\r\n                            <input placeholder=\"weight\" />\r\n                            <Dropdown.Item >GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <DropdownButton as={ButtonGroup} title=\"GRAPH\" variant=\"secondary\">\r\n                            <input placeholder=\"count\" />\r\n                            <Dropdown.Item >GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <Button variant=\"secondary\" >REAL DISTANCE</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"ANIMATION\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" />\r\n                            <Dropdown.Item >START</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </ButtonGroup>\r\n                    <div>\r\n                        <div style={{height: 300}}>\r\n                            <p>\r\n                                This area\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"text-center\">\r\n                            <input type=\"range\" min={0} defaultValue={0} className=\"p-3 slider\" id=\"slider\"/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-secondary bg-opacity-10\">\r\n                        <div id=\"instruction\"></div>\r\n                        <div id=\"execution\" ></div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={5} className=\"bg-secondary bg-opacity-25\">\r\n                    <div className=\"bg-secondary bg-opacity-25\">\r\n                        <h3 className=\"text-secondary p-3\">Code Area</h3>\r\n                    </div>\r\n                    <div id=\"code\">\r\n                        <pre className=\"p-3\">\r\n\r\n</pre>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default HomePage;","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Vertex} from \"../components/Vertex\";\r\nimport {Edge} from \"../components/Edge\";\r\nimport {Frame} from \"../components/Frame\";\r\nimport {Graph} from \"../components/Graph\";\r\nimport {COLOR} from \"../components/Vertex\";\r\nimport {INF} from \"../components/Vertex\";\r\nimport {Layout} from \"../components/Layout\";\r\nimport {ButtonGroup, Button, Dropdown, DropdownButton, Container,Row,Col} from \"react-bootstrap\";\r\nimport {dfs,getDistance} from \"../components/utils\";\r\n\r\nexport const canvasWidth = 600;\r\nexport const canvasHeight = 300;\r\n\r\nconst DFS = () => {\r\n    const [instruction, setInstruction] = useState(\" \");\r\n    const [execution, setExecution] = useState(\" \");\r\n    const [vertexes, setVertexes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [animation,setAnimation] = useState([]);\r\n    let sourcePoint = 0;\r\n    let count = 0;\r\n    let isDown = false;\r\n    let dragTarget = null;\r\n    let dragEdge = [];\r\n    let startX = null;\r\n    let startY = null;\r\n    let ctx = null;\r\n    /*let vertexes = [];\r\n    let edges = [];*/\r\n    let randX = canvasWidth - 200\r\n    let randY = canvasHeight - 200\r\n    const canvas = useRef(null);\r\n    let edge = {vertexe1:null, vertexe2:null, weight:null}\r\n\r\n    useEffect(()=>{\r\n        const canvasEle = canvas.current;\r\n        canvasEle.width = canvasWidth;\r\n        canvasEle.height = canvasHeight;\r\n\r\n        // get context of the canvas\r\n        ctx = canvasEle.getContext(\"2d\");\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    });\r\n\r\n    /*    useEffect(() => {\r\n            draw();\r\n        }, []);*/\r\n\r\n    const draw = () => {\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n    let drawFrame = function (i,animation) {\r\n        animation[i].edgesColor.forEach((value, index, array)=>{\r\n            edges[index].color = value\r\n        })\r\n        animation[i].vertexesColor.forEach((value, index, array)=>{\r\n            vertexes[index].color = value\r\n        })\r\n        animation[i].distance.forEach((value, index, array)=>{\r\n            vertexes[index].d = value\r\n        })\r\n        setInstruction(animation[i].instruction);\r\n        setExecution(animation[i].execution);\r\n        setVertexes(vertexes);\r\n        setEdges(edges);\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n\r\n    function animate(animation) {\r\n        let index = 0;\r\n        let timer = setInterval(frame, 500)\r\n        function frame() {\r\n            if (index == animation.length) {\r\n                clearInterval(timer)\r\n            } else {\r\n                drawFrame(index,animation)\r\n                //draw()\r\n                index++\r\n            }\r\n        }\r\n    }\r\n\r\n    const containsPoint = (x, y) => {\r\n        let isTarget = null;\r\n        for (let i = 0; i < vertexes.length; i++) {\r\n            const circle = vertexes[i];\r\n            let distance = Math.sqrt(Math.pow((circle.x-x),2)+Math.pow((circle.y-y),2))\r\n            if(distance < circle.radius*3/2) {\r\n                dragTarget = circle;\r\n                for(let j = 0; j < edges.length; j++) {\r\n                    if(edges[j].v1 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 1});\r\n                    if(edges[j].v2 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 2});\r\n                }\r\n                isTarget = true;\r\n                break;\r\n            }\r\n        }\r\n        return isTarget;\r\n    }\r\n\r\n    const handleCanvasClick=(event)=>{\r\n        const X = Math.random()*(randX)+100;\r\n        const Y = Math.random()*(randY)+100;\r\n        const newVertex = new Vertex(X,Y,COLOR.PINK,vertexes.length)\r\n        vertexes.push(newVertex);\r\n        draw();\r\n    };\r\n\r\n    const handleMouseMove = (event)=>{\r\n        if (!isDown) return;\r\n        const mouseX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        const mouseY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        const dx = mouseX - startX;\r\n        const dy = mouseY - startY;\r\n        startX = mouseX;\r\n        startY = mouseY;\r\n        dragTarget.x += dx;\r\n        dragTarget.y += dy;\r\n        if(dragEdge.length != 0){\r\n            for(let i = 0; i < dragEdge.length; i++) {\r\n                if (dragEdge[i].v == 1) {\r\n                    edges[dragEdge[i].num].x1 += dx;\r\n                    edges[dragEdge[i].num].y1 += dy;\r\n                }\r\n                if (dragEdge[i].v == 2) {\r\n                    edges[dragEdge[i].num].x2 += dx;\r\n                    edges[dragEdge[i].num].y2 += dy;\r\n                }\r\n            }\r\n        }\r\n        draw();\r\n    };\r\n\r\n    const handleMouseDown = (event)=>{\r\n        startX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        startY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        isDown = containsPoint(startX,startY)\r\n    };\r\n\r\n    const handleMouseUp = e => {\r\n        dragTarget = null;\r\n        dragEdge = [];\r\n        isDown = false;\r\n    }\r\n    const handleMouseOut = e => {\r\n        handleMouseUp(e);\r\n    }\r\n\r\n    const handleClearCanvas=(event)=>{\r\n        setVertexes([]);\r\n        setEdges([]);\r\n        setExecution(\" \");\r\n        setInstruction(\" \");\r\n    };\r\n\r\n    const inputChange1=(event)=>{\r\n        edge.vertexe1 = event.target.value;\r\n    };\r\n    const inputChange2=(event)=>{\r\n        edge.vertexe2 = event.target.value;\r\n    };\r\n    const inputChange3=(event)=>{\r\n        edge.weight = event.target.value;\r\n    };\r\n    const inputChange4=(event)=>{\r\n        count = event.target.value;\r\n    };\r\n    const inputSourcePoint=(event)=>{\r\n        sourcePoint = event.target.value;\r\n    };\r\n    const sliderChange=(event)=>{\r\n        if(animation.length > 0) {\r\n            event.target.max = animation.length - 1;\r\n            drawFrame(event.target.value,animation);\r\n        }\r\n    };\r\n    const realDistance=(event)=>{\r\n        edges.forEach((value, index, array)=>{\r\n            array[index].weight = getDistance(array[index])\r\n        })\r\n        setEdges(edges);\r\n        draw()\r\n    }\r\n    const handleGraphClick = (event)=>{\r\n        for(let i = 0; i < count; i++) {\r\n            vertexes.push(new Vertex(Math.random()*(randX)+100,Math.random()*(randY)+100,COLOR.PINK,vertexes.length))\r\n        }\r\n        let connected = 0\r\n        while(!connected) {\r\n            let flag = 1\r\n            for(let j = 0; j < Math.floor(Math.random()*(vertexes.length*5)); j++) {\r\n                let v1 = Math.floor(Math.random()*vertexes.length)\r\n                let v2 = Math.floor(Math.random()*vertexes.length)\r\n                let weight = Math.floor(Math.random()*100+1)\r\n                for(let k = 0; k < edges.length; k++) {\r\n                    if ((edges[k].v1 == v1 || edges[k].v1 == v2)\r\n                        && (edges[k].v2 == v1 || edges[k].v2 == v2)) {\r\n                        flag = 0\r\n                        break\r\n                    }\r\n                }\r\n                if(!(v1 == v2) && flag){\r\n                    edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n                }\r\n            }\r\n            let graph = new Graph(vertexes.length)\r\n            graph.insert(edges)\r\n            connected = dfs(0,graph.visited,graph.mat,graph.n)\r\n        }\r\n        draw()\r\n    }\r\n    const handleEdgeClick = (event)=>{\r\n        let v1 = edge.vertexe1;\r\n        let v2 = edge.vertexe2;\r\n        let weight = edge.weight;\r\n        edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n        draw();\r\n    };\r\n    function kEdge() {\r\n        this.begin = 0\r\n        this.end = 0\r\n        this.weight = 0\r\n    }\r\n    function find(parent, n) {\r\n        while(parent[n] > 0) {\r\n            n = parent[n]\r\n        }\r\n        return n\r\n    }\r\n    let getEdge = function (v1,v2,edges) {\r\n        let num\r\n        edges.forEach((value, index, array)=>{\r\n            if((array[index].v1 == v1 || array[index].v1 == v2)\r\n                && (array[index].v2 == v1 || array[index].v2 == v2)) {\r\n                num = index\r\n            }\r\n        })\r\n        return num\r\n    }\r\n\r\n    const dfs_ = ()=>{\r\n        let frame\r\n        let execution = \"<br>\"\r\n        let instruction = \" \"\r\n        let v = sourcePoint\r\n        let graph = new Graph(vertexes.length)\r\n        let stack = []\r\n        let result = []\r\n/*        if(v < 0 || v >= vertexCount || isNaN(v)) {\r\n            alert(\"Vertex does not exist\")\r\n            return\r\n        }\r\n        if(graph.n == 0) {\r\n            alert(\"Graph does not exist\")\r\n            return\r\n        }\r\n        disableButtons()*/\r\n        animation.push(new Frame(vertexes.length,edges.length))\r\n        let vertexesColor = new Array(vertexes.length)\r\n        let edgesColor = new Array(edges.length)\r\n        for(let i = 0; i < vertexes.length; i++) {\r\n            vertexesColor[i] = COLOR.PINK\r\n        }\r\n        for(let i = 0; i < edges.length; i++) {\r\n            edgesColor[i] = COLOR.GREY\r\n        }\r\n        graph.insert(edges)\r\n        stack.push(v)\r\n        result.push(v)\r\n        graph.visited[v] = 1\r\n        vertexesColor[v] = COLOR.GREEN\r\n        frame = new Frame(vertexes.length,edges.length)\r\n        frame.record(vertexesColor,edgesColor,instruction,execution)\r\n        animation.push(frame)\r\n\r\n        while(stack.length != 0) {\r\n            let top = stack[stack.length-1]\r\n            let flag = 0\r\n            for(let i = 0; i < graph.n; i++) {\r\n                if(!graph.visited[i] && graph.mat[top][i]!=INF) {\r\n                    stack.push(i)\r\n                    instruction = \"stack | \"+stack.join(\" | \")\r\n                    top = stack[stack.length-1]\r\n                    graph.visited[i] = 1\r\n                    result.push(i)\r\n                    execution += i+\" is not visited, \"+\"visit \"+i+\"<br><br>\"\r\n                    vertexesColor[i] = COLOR.GREEN\r\n                    frame = new Frame(vertexes.length,edges.length)\r\n                    frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                    animation.push(frame)\r\n                    break\r\n                }\r\n            }\r\n            let topColor = vertexesColor[top]\r\n            vertexesColor[top] = COLOR.RED\r\n            execution += \"visit the adjacent vertexes of \"+top+\"<br>\"\r\n            for(let i = 0; i < graph.n; i++) {\r\n                if((graph.mat[top][i]<INF && graph.visited[i])||graph.mat[top][i]==INF) {\r\n                    flag++\r\n                }\r\n                if(graph.mat[top][i]<INF && graph.visited[i]) {\r\n                    execution += i+\" is visited<br>\"\r\n                    let color = vertexesColor[i]\r\n                    vertexesColor[i] = COLOR.RED\r\n                    edgesColor[getEdge(top,i,edges)] = COLOR.RED\r\n                    frame = new Frame(vertexes.length,edges.length)\r\n                    frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                    animation.push(frame)\r\n\r\n                    vertexesColor[i] = color\r\n                    edgesColor[getEdge(top,i,edges)] = COLOR.GREY\r\n                    frame = new Frame(vertexes.length,edges.length)\r\n                    frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                    animation.push(frame)\r\n                }\r\n            }\r\n            vertexesColor[top] = topColor\r\n            frame = new Frame(vertexes.length,edges.length)\r\n            frame.record(vertexesColor,edgesColor,instruction,execution)\r\n            animation.push(frame)\r\n            if(flag == graph.n) {\r\n                stack.pop()\r\n                instruction = \"stack | \"+stack.join(\" | \")\r\n                execution += \"All of the adjacent vertexes of \"+top+\" are visited<br><br>\"\r\n                if(stack.length!=0) top = stack[stack.length-1]\r\n            }\r\n        }\r\n        instruction = \"visit order: \"+result.join(\" \")\r\n        frame = new Frame(vertexes.length,edges.length)\r\n        frame.record(vertexesColor,edgesColor,instruction,execution)\r\n        animation.push(frame)\r\n        animate(animation);\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Row className=\"no-gutter\">\r\n                <Col md={7} className=\"bg-secondary bg-opacity-10\">\r\n                    <ButtonGroup aria-label=\"Basic example\" className=\"p-2\">\r\n                        <Button variant=\"secondary\" onClick={handleClearCanvas}>CLEAR</Button>\r\n                        <Button variant=\"secondary\" onClick={handleCanvasClick}>VERTEX</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"EDGE\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" onChange={inputChange1}/>\r\n                            <input placeholder=\"vertex2\" onChange={inputChange2}/>\r\n                            <input placeholder=\"weight\" onChange={inputChange3}/>\r\n                            <Dropdown.Item onClick={handleEdgeClick}>GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <DropdownButton as={ButtonGroup} title=\"GRAPH\" variant=\"secondary\">\r\n                            <input placeholder=\"count\" onChange={inputChange4}/>\r\n                            <Dropdown.Item onClick={handleGraphClick}>GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <Button variant=\"secondary\" onClick={realDistance}>REAL DISTANCE</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"ANIMATION\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" onChange={inputSourcePoint}/>\r\n                            <Dropdown.Item onClick={dfs_}>START</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </ButtonGroup>\r\n                    <div>\r\n                        <canvas\r\n                            className=\"App-canvas\"\r\n                            ref={canvas}\r\n                            width={canvasWidth}\r\n                            height={canvasHeight}\r\n                            onMouseDown={handleMouseDown}\r\n                            onMouseMove={handleMouseMove}\r\n                            onMouseUp={handleMouseUp}\r\n                            onMouseOut={handleMouseOut}/>\r\n                        <div className=\"text-center\">\r\n                            <input type=\"range\" min={0} defaultValue={0} className=\"p-3 slider\" id=\"slider\" onInput={sliderChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-secondary bg-opacity-10\">\r\n                        <div id=\"instruction\" dangerouslySetInnerHTML={{__html:instruction}}></div>\r\n                        <div id=\"execution\" dangerouslySetInnerHTML={{__html:execution}}></div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={5} className=\"bg-secondary bg-opacity-25\">\r\n                    <div className=\"bg-secondary bg-opacity-25\">\r\n                        <h3 className=\"text-secondary p-3\">Depth-first search</h3>\r\n                    </div>\r\n                    <div id=\"code\">\r\n                        <pre className=\"p-3\">\r\n    {`\r\nfunction dfs(v,graph) {\r\n    let stack = []\r\n    stack.push(v)\r\n    graph.visited[v] = 1\r\n    while(stack.length != 0) {\r\n        let top = stack[stack.length-1]\r\n        let flag = 0\r\n        for(let i = 0; i < graph.n; i++) {\r\n            if((graph.mat[top][i] < Infinity && graph.visited[i]) || graph.mat[top][i] == Infinity) {\r\n                flag++\r\n            }\r\n        }\r\n        if(flag == graph.n) {\r\n            stack.pop()\r\n            if(stack.length!=0) top = stack[stack.length-1]\r\n        }\r\n        for(let i = 0; i < graph.n; i++) {\r\n            if(!graph.visited[i] && graph.mat[top][i] != Infinity) {\r\n                stack.push(i)\r\n                graph.visited[i] = 1\r\n                break;\r\n            }\r\n        }\r\n    }\r\n}\r\n    `}\r\n</pre>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default DFS;","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Vertex} from \"../components/Vertex\";\r\nimport {Edge} from \"../components/Edge\";\r\nimport {Frame} from \"../components/Frame\";\r\nimport {Graph} from \"../components/Graph\";\r\nimport {COLOR} from \"../components/Vertex\";\r\nimport {INF} from \"../components/Vertex\";\r\nimport {Layout} from \"../components/Layout\";\r\nimport {ButtonGroup, Button, Dropdown, DropdownButton, Container,Row,Col} from \"react-bootstrap\";\r\nimport {dfs,getDistance} from \"../components/utils\";\r\n\r\nexport const canvasWidth = 600;\r\nexport const canvasHeight = 300;\r\n\r\nconst Prim = () => {\r\n    const [instruction, setInstruction] = useState(\" \");\r\n    const [execution, setExecution] = useState(\" \");\r\n    const [vertexes, setVertexes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [animation,setAnimation] = useState([]);\r\n    let sourcePoint = 0;\r\n    let count = 0;\r\n    let isDown = false;\r\n    let dragTarget = null;\r\n    let dragEdge = [];\r\n    let startX = null;\r\n    let startY = null;\r\n    let ctx = null;\r\n    /*let vertexes = [];\r\n    let edges = [];*/\r\n    let randX = canvasWidth - 200\r\n    let randY = canvasHeight - 200\r\n    const canvas = useRef(null);\r\n    let edge = {vertexe1:null, vertexe2:null, weight:null}\r\n\r\n    useEffect(()=>{\r\n        const canvasEle = canvas.current;\r\n        canvasEle.width = canvasWidth;\r\n        canvasEle.height = canvasHeight;\r\n\r\n        // get context of the canvas\r\n        ctx = canvasEle.getContext(\"2d\");\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    });\r\n\r\n    /*    useEffect(() => {\r\n            draw();\r\n        }, []);*/\r\n\r\n    const draw = () => {\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n\r\n    let drawFrame = function (i,animation) {\r\n        animation[i].edgesColor.forEach((value, index, array)=>{\r\n            edges[index].color = value\r\n        })\r\n        animation[i].vertexesColor.forEach((value, index, array)=>{\r\n            vertexes[index].color = value\r\n        })\r\n        animation[i].distance.forEach((value, index, array)=>{\r\n            vertexes[index].d = value\r\n        })\r\n        setInstruction(animation[i].instruction);\r\n        setExecution(animation[i].execution);\r\n        setVertexes(vertexes);\r\n        setEdges(edges);\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n\r\n    function animate(animation) {\r\n        let index = 0;\r\n        let timer = setInterval(frame, 500)\r\n        function frame() {\r\n            if (index == animation.length) {\r\n                clearInterval(timer)\r\n            } else {\r\n                drawFrame(index,animation)\r\n                //draw()\r\n                index++\r\n            }\r\n        }\r\n    }\r\n\r\n    const containsPoint = (x, y) => {\r\n        let isTarget = null;\r\n        for (let i = 0; i < vertexes.length; i++) {\r\n            const circle = vertexes[i];\r\n            let distance = Math.sqrt(Math.pow((circle.x-x),2)+Math.pow((circle.y-y),2))\r\n            if(distance < circle.radius*3/2) {\r\n                dragTarget = circle;\r\n                for(let j = 0; j < edges.length; j++) {\r\n                    if(edges[j].v1 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 1});\r\n                    if(edges[j].v2 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 2});\r\n                }\r\n                isTarget = true;\r\n                break;\r\n            }\r\n        }\r\n        return isTarget;\r\n    }\r\n\r\n    const handleCanvasClick=(event)=>{\r\n        const X = Math.random()*(randX)+100;\r\n        const Y = Math.random()*(randY)+100;\r\n        const newVertex = new Vertex(X,Y,COLOR.PINK,vertexes.length)\r\n        vertexes.push(newVertex);\r\n        draw();\r\n    };\r\n\r\n    const handleMouseMove = (event)=>{\r\n        if (!isDown) return;\r\n        const mouseX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        const mouseY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        const dx = mouseX - startX;\r\n        const dy = mouseY - startY;\r\n        startX = mouseX;\r\n        startY = mouseY;\r\n        dragTarget.x += dx;\r\n        dragTarget.y += dy;\r\n        if(dragEdge.length != 0){\r\n            for(let i = 0; i < dragEdge.length; i++) {\r\n                if (dragEdge[i].v == 1) {\r\n                    edges[dragEdge[i].num].x1 += dx;\r\n                    edges[dragEdge[i].num].y1 += dy;\r\n                }\r\n                if (dragEdge[i].v == 2) {\r\n                    edges[dragEdge[i].num].x2 += dx;\r\n                    edges[dragEdge[i].num].y2 += dy;\r\n                }\r\n            }\r\n        }\r\n        draw();\r\n    };\r\n\r\n    const handleMouseDown = (event)=>{\r\n        startX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        startY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        isDown = containsPoint(startX,startY)\r\n    };\r\n\r\n    const handleMouseUp = e => {\r\n        dragTarget = null;\r\n        dragEdge = [];\r\n        isDown = false;\r\n    }\r\n\r\n    const handleMouseOut = e => {\r\n        handleMouseUp(e);\r\n    }\r\n\r\n    const handleClearCanvas=(event)=>{\r\n        setVertexes([]);\r\n        setEdges([]);\r\n        setExecution(\" \");\r\n        setInstruction(\" \");\r\n        setAnimation([]);\r\n    };\r\n\r\n    const inputChange1=(event)=>{\r\n        edge.vertexe1 = event.target.value;\r\n    };\r\n    const inputChange2=(event)=>{\r\n        edge.vertexe2 = event.target.value;\r\n    };\r\n    const inputChange3=(event)=>{\r\n        edge.weight = event.target.value;\r\n    };\r\n    const inputChange4=(event)=>{\r\n        count = event.target.value;\r\n    };\r\n    const inputSourcePoint=(event)=>{\r\n        sourcePoint = event.target.value;\r\n    };\r\n    const sliderChange=(event)=>{\r\n        if(animation.length > 0) {\r\n            event.target.max = animation.length - 1;\r\n            drawFrame(event.target.value,animation);\r\n        }\r\n    };\r\n    const realDistance=(event)=>{\r\n        edges.forEach((value, index, array)=>{\r\n            array[index].weight = getDistance(array[index])\r\n        })\r\n        setEdges(edges);\r\n        draw()\r\n    }\r\n\r\n    const handleGraphClick = (event)=>{\r\n        for(let i = 0; i < count; i++) {\r\n            vertexes.push(new Vertex(Math.random()*(randX)+100,Math.random()*(randY)+100,COLOR.PINK,vertexes.length))\r\n        }\r\n        let connected = 0\r\n        while(!connected) {\r\n            let flag = 1\r\n            for(let j = 0; j < Math.floor(Math.random()*(vertexes.length*5)); j++) {\r\n                let v1 = Math.floor(Math.random()*vertexes.length)\r\n                let v2 = Math.floor(Math.random()*vertexes.length)\r\n                let weight = Math.floor(Math.random()*100+1)\r\n                for(let k = 0; k < edges.length; k++) {\r\n                    if ((edges[k].v1 == v1 || edges[k].v1 == v2)\r\n                        && (edges[k].v2 == v1 || edges[k].v2 == v2)) {\r\n                        flag = 0\r\n                        break\r\n                    }\r\n                }\r\n                if(!(v1 == v2) && flag){\r\n                    edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n                }\r\n            }\r\n            let graph = new Graph(vertexes.length)\r\n            graph.insert(edges)\r\n            connected = dfs(0,graph.visited,graph.mat,graph.n)\r\n        }\r\n        draw()\r\n    }\r\n    const handleEdgeClick = (event)=>{\r\n        let v1 = edge.vertexe1;\r\n        let v2 = edge.vertexe2;\r\n        let weight = edge.weight;\r\n        edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n        draw();\r\n    };\r\n    let getEdge = function (v1,v2,edges) {\r\n        let num\r\n        edges.forEach((value, index, array)=>{\r\n            if((array[index].v1 == v1 || array[index].v1 == v2)\r\n                && (array[index].v2 == v1 || array[index].v2 == v2)) {\r\n                num = index\r\n            }\r\n        })\r\n        return num\r\n    }\r\n\r\n    const prim = ()=>{\r\n        let frame\r\n        let execution = \"<br>\"\r\n        let instruction = \" \"\r\n        let minEdges = new Array(vertexes.length)\r\n        let v = sourcePoint\r\n        let graph = new Graph(vertexes.length)\r\n        let vertexesColor = new Array(vertexes.length)\r\n        let edgesColor = new Array(edges.length)\r\n        for(let i = 0; i < vertexes.length; i++) {\r\n            vertexesColor[i] = COLOR.PINK\r\n        }\r\n        for(let i = 0; i < edges.length; i++) {\r\n            edgesColor[i] = COLOR.GREY\r\n        }\r\n        graph.insert(edges)\r\n/*        if(v<0 || v>=vertexCount || isNaN(v)) {\r\n            alert(\"Vertex does not exist\")\r\n            return\r\n        }\r\n        if(graph.n == 0) {\r\n            alert(\"Graph does not exist\")\r\n            return\r\n        }\r\n        let connected = utils.dfs(v,graph.visited,graph.mat,graph.n)\r\n        if(!connected) {\r\n            alert(\"Graph is not connected\")\r\n            return\r\n        }\r\n        disableButtons()*/\r\n        animation.push(new Frame(vertexes.length,edges.length))\r\n        for(let i = 0; i < graph.n; i++) {\r\n            graph.visited[i] = 0\r\n        }\r\n        let result = []\r\n        graph.dist[v] = 0\r\n        for(let i = 0; i < graph.n; i++) {\r\n            let minDist = INF\r\n            let minVertex\r\n            for(let j = 0; j < graph.n; j++) {\r\n                if(!graph.visited[j] && (graph.dist[j] < minDist)) {\r\n                    minDist = graph.dist[j]\r\n                    minVertex = j\r\n                }\r\n            }\r\n            graph.visited[minVertex] = 1\r\n            result.push(minVertex)\r\n            instruction = \"Vertexes: \"+result.join(\" \")\r\n\r\n            frame = new Frame(vertexes.length,edges.length)\r\n            vertexesColor[minVertex] = COLOR.GREEN\r\n            edgesColor[getEdge(minVertex,minEdges[minVertex],edges)] = COLOR.GREEN\r\n            execution += \"Adding \"+minVertex+\" to the tree<br>\"\r\n            frame.record(vertexesColor,edgesColor,instruction,execution)\r\n            animation.push(frame)\r\n\r\n            execution += \"<br>Finding the minimum edge<br>\"\r\n            for(let j = 0; j < result.length; j++) {\r\n                for(let k = 0; k < graph.n; k++) {\r\n                    if(graph.mat[result[j]][k]!=INF && !graph.visited[k]){\r\n\r\n                        frame = new Frame(vertexes.length,edges.length)\r\n                        vertexesColor[k] = COLOR.YELLOW\r\n                        edgesColor[getEdge(result[j],k,edges)] = COLOR.YELLOW\r\n                        frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                        animation.push(frame)\r\n\r\n                        frame = new Frame(vertexes.length,edges.length)\r\n                        vertexesColor[k] = COLOR.PINK\r\n                        edgesColor[getEdge(result[j],k,edges)] = COLOR.GREY\r\n                        frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                        animation.push(frame)\r\n                    }\r\n                }\r\n            }\r\n            for(let j = 0; j < graph.n; j++) {\r\n                if(!graph.visited[j] && (graph.mat[minVertex][j] < graph.dist[j])) {\r\n                    graph.dist[j] = graph.mat[minVertex][j]\r\n                    minEdges[j] = minVertex\r\n                }\r\n            }\r\n        }\r\n        animate(animation);\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Row className=\"no-gutter\">\r\n                <Col md={7} className=\"bg-secondary bg-opacity-10\">\r\n                    <ButtonGroup aria-label=\"Basic example\" className=\"p-2\">\r\n                        <Button variant=\"secondary\" onClick={handleClearCanvas}>CLEAR</Button>\r\n                        <Button variant=\"secondary\" onClick={handleCanvasClick}>VERTEX</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"EDGE\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" onChange={inputChange1}/>\r\n                            <input placeholder=\"vertex2\" onChange={inputChange2}/>\r\n                            <input placeholder=\"weight\" onChange={inputChange3}/>\r\n                            <Dropdown.Item onClick={handleEdgeClick}>GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <DropdownButton as={ButtonGroup} title=\"GRAPH\" variant=\"secondary\">\r\n                            <input placeholder=\"count\" onChange={inputChange4}/>\r\n                            <Dropdown.Item onClick={handleGraphClick}>GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <Button variant=\"secondary\" onClick={realDistance}>REAL DISTANCE</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"ANIMATION\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" onChange={inputSourcePoint}/>\r\n                            <Dropdown.Item onClick={prim}>START</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </ButtonGroup>\r\n                    <div>\r\n                        <canvas\r\n                            className=\"App-canvas\"\r\n                            ref={canvas}\r\n                            width={canvasWidth}\r\n                            height={canvasHeight}\r\n                            onMouseDown={handleMouseDown}\r\n                            onMouseMove={handleMouseMove}\r\n                            onMouseUp={handleMouseUp}\r\n                            onMouseOut={handleMouseOut}/>\r\n                        <div className=\"text-center\">\r\n                            <input type=\"range\" min={0} defaultValue={0} className=\"p-3 slider\" id=\"slider\" onInput={sliderChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-secondary bg-opacity-10\">\r\n                        <div id=\"instruction\" dangerouslySetInnerHTML={{__html:instruction}}></div>\r\n                        <div id=\"execution\" dangerouslySetInnerHTML={{__html:execution}}></div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={5} className=\"bg-secondary bg-opacity-25\">\r\n                    <div className=\"bg-secondary bg-opacity-25\">\r\n                        <h3 className=\"text-secondary p-3\">Prim's algorithm</h3>\r\n                    </div>\r\n                    <div id=\"code\">\r\n                        <pre className=\"p-3\">\r\n    {`\r\nfunction prim(v,graph) {\r\n    let minEdges = new Array(graph.n)\r\n    graph.dist[v] = 0\r\n    for(let i = 0; i < graph.n; i++) {\r\n        let minDist = INF\r\n        let minVertex\r\n        for(let j = 0; j < graph.n; j++) {\r\n            if(!graph.visited[j] && (graph.dist[j] < minDist)) {\r\n                minDist = graph.dist[j]\r\n                minVertex = j\r\n            }\r\n        }\r\n        graph.visited[minVertex] = 1\r\n        for(let j = 0; j < graph.n; j++) {\r\n            if(!graph.visited[j] && (graph.mat[minVertex][j] < graph.dist[j])) {\r\n                graph.dist[j] = graph.mat[minVertex][j]\r\n                minEdges[j] = minVertex\r\n            }\r\n        }\r\n    }\r\n}\r\n    `}\r\n</pre>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Prim;\r\n","import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Vertex} from \"../components/Vertex\";\r\nimport {Edge} from \"../components/Edge\";\r\nimport {Frame} from \"../components/Frame\";\r\nimport {Graph} from \"../components/Graph\";\r\nimport {COLOR} from \"../components/Vertex\";\r\nimport {INF} from \"../components/Vertex\";\r\nimport {Layout} from \"../components/Layout\";\r\nimport {ButtonGroup, Button, Dropdown, DropdownButton, Container,Row,Col} from \"react-bootstrap\";\r\nimport {dfs,getDistance} from \"../components/utils\";\r\n\r\nexport const canvasWidth = 600;\r\nexport const canvasHeight = 300;\r\n\r\nconst Dijkstra = () => {\r\n    const [instruction, setInstruction] = useState(\" \");\r\n    const [execution, setExecution] = useState(\" \");\r\n    const [vertexes, setVertexes] = useState([]);\r\n    const [edges, setEdges] = useState([]);\r\n    const [animation,setAnimation] = useState([]);\r\n    let sourcePoint = 0;\r\n    let count = 0;\r\n    let isDown = false;\r\n    let dragTarget = null;\r\n    let dragEdge = [];\r\n    let startX = null;\r\n    let startY = null;\r\n    let ctx = null;\r\n    /*let vertexes = [];\r\n    let edges = [];*/\r\n    let randX = canvasWidth - 200\r\n    let randY = canvasHeight - 200\r\n    const canvas = useRef(null);\r\n    let edge = {vertexe1:null, vertexe2:null, weight:null}\r\n\r\n    useEffect(()=>{\r\n        const canvasEle = canvas.current;\r\n        canvasEle.width = canvasWidth;\r\n        canvasEle.height = canvasHeight;\r\n\r\n        // get context of the canvas\r\n        ctx = canvasEle.getContext(\"2d\");\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    });\r\n\r\n    /*    useEffect(() => {\r\n            draw();\r\n        }, []);*/\r\n\r\n    const draw = () => {\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n    let drawFrame = function (i,animation) {\r\n        animation[i].edgesColor.forEach((value, index, array)=>{\r\n            edges[index].color = value\r\n        })\r\n        animation[i].vertexesColor.forEach((value, index, array)=>{\r\n            vertexes[index].color = value\r\n        })\r\n        animation[i].distance.forEach((value, index, array)=>{\r\n            vertexes[index].d = value\r\n        })\r\n        setInstruction(animation[i].instruction);\r\n        setExecution(animation[i].execution);\r\n        setVertexes(vertexes);\r\n        setEdges(edges);\r\n        ctx.clearRect( 0,0, canvasWidth, canvasHeight );\r\n        edges.forEach((value, index, array)=>{array[index].drawEdge(ctx)});\r\n        vertexes.forEach((value, index, array)=>{array[index].drawVertex(ctx)});\r\n\r\n    }\r\n\r\n    function animate(animation) {\r\n        let index = 0;\r\n        let timer = setInterval(frame, 500)\r\n        function frame() {\r\n            if (index == animation.length) {\r\n                clearInterval(timer)\r\n            } else {\r\n                drawFrame(index,animation)\r\n                //draw()\r\n                index++\r\n            }\r\n        }\r\n    }\r\n\r\n    const containsPoint = (x, y) => {\r\n        let isTarget = null;\r\n        for (let i = 0; i < vertexes.length; i++) {\r\n            const circle = vertexes[i];\r\n            let distance = Math.sqrt(Math.pow((circle.x-x),2)+Math.pow((circle.y-y),2))\r\n            if(distance < circle.radius*3/2) {\r\n                dragTarget = circle;\r\n                for(let j = 0; j < edges.length; j++) {\r\n                    if(edges[j].v1 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 1});\r\n                    if(edges[j].v2 == dragTarget.num)\r\n                        dragEdge.push({num: j, v: 2});\r\n                }\r\n                isTarget = true;\r\n                break;\r\n            }\r\n        }\r\n        return isTarget;\r\n    }\r\n\r\n    const handleCanvasClick=(event)=>{\r\n        const X = Math.random()*(randX)+100;\r\n        const Y = Math.random()*(randY)+100;\r\n        const newVertex = new Vertex(X,Y,COLOR.PINK,vertexes.length)\r\n        vertexes.push(newVertex);\r\n        draw();\r\n    };\r\n\r\n    const handleMouseMove = (event)=>{\r\n        if (!isDown) return;\r\n        const mouseX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        const mouseY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        const dx = mouseX - startX;\r\n        const dy = mouseY - startY;\r\n        startX = mouseX;\r\n        startY = mouseY;\r\n        dragTarget.x += dx;\r\n        dragTarget.y += dy;\r\n        if(dragEdge.length != 0){\r\n            for(let i = 0; i < dragEdge.length; i++) {\r\n                if (dragEdge[i].v == 1) {\r\n                    edges[dragEdge[i].num].x1 += dx;\r\n                    edges[dragEdge[i].num].y1 += dy;\r\n                }\r\n                if (dragEdge[i].v == 2) {\r\n                    edges[dragEdge[i].num].x2 += dx;\r\n                    edges[dragEdge[i].num].y2 += dy;\r\n                }\r\n            }\r\n        }\r\n        draw();\r\n    };\r\n\r\n    const handleMouseDown = (event)=>{\r\n        startX = parseInt(event.nativeEvent.offsetX - canvas.current.clientLeft);\r\n        startY = parseInt(event.nativeEvent.offsetY - canvas.current.clientTop);\r\n        isDown = containsPoint(startX,startY)\r\n    };\r\n\r\n    const handleMouseUp = e => {\r\n        dragTarget = null;\r\n        dragEdge = [];\r\n        isDown = false;\r\n    }\r\n    const handleMouseOut = e => {\r\n        handleMouseUp(e);\r\n    }\r\n\r\n    const handleClearCanvas=(event)=>{\r\n        setVertexes([]);\r\n        setEdges([]);\r\n        setExecution(\" \");\r\n        setInstruction(\" \");\r\n    };\r\n\r\n    const inputChange1=(event)=>{\r\n        edge.vertexe1 = event.target.value;\r\n    };\r\n    const inputChange2=(event)=>{\r\n        edge.vertexe2 = event.target.value;\r\n    };\r\n    const inputChange3=(event)=>{\r\n        edge.weight = event.target.value;\r\n    };\r\n    const inputChange4=(event)=>{\r\n        count = event.target.value;\r\n    };\r\n    const inputSourcePoint=(event)=>{\r\n        sourcePoint = event.target.value;\r\n    };\r\n    const sliderChange=(event)=>{\r\n        if(animation.length > 0) {\r\n            event.target.max = animation.length - 1;\r\n            drawFrame(event.target.value,animation);\r\n        }\r\n    };\r\n    const realDistance=(event)=>{\r\n        edges.forEach((value, index, array)=>{\r\n            array[index].weight = getDistance(array[index])\r\n        })\r\n        setEdges(edges);\r\n        draw()\r\n    }\r\n    const handleGraphClick = (event)=>{\r\n        for(let i = 0; i < count; i++) {\r\n            vertexes.push(new Vertex(Math.random()*(randX)+100,Math.random()*(randY)+100,COLOR.PINK,vertexes.length))\r\n        }\r\n        let connected = 0\r\n        while(!connected) {\r\n            let flag = 1\r\n            for(let j = 0; j < Math.floor(Math.random()*(vertexes.length*5)); j++) {\r\n                let v1 = Math.floor(Math.random()*vertexes.length)\r\n                let v2 = Math.floor(Math.random()*vertexes.length)\r\n                let weight = Math.floor(Math.random()*100+1)\r\n                for(let k = 0; k < edges.length; k++) {\r\n                    if ((edges[k].v1 == v1 || edges[k].v1 == v2)\r\n                        && (edges[k].v2 == v1 || edges[k].v2 == v2)) {\r\n                        flag = 0\r\n                        break\r\n                    }\r\n                }\r\n                if(!(v1 == v2) && flag){\r\n                    edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n                }\r\n            }\r\n            let graph = new Graph(vertexes.length)\r\n            graph.insert(edges)\r\n            connected = dfs(0,graph.visited,graph.mat,graph.n)\r\n        }\r\n        draw()\r\n    }\r\n    const handleEdgeClick = (event)=>{\r\n        let v1 = edge.vertexe1;\r\n        let v2 = edge.vertexe2;\r\n        let weight = edge.weight;\r\n        edges.push(new Edge(vertexes[v1], vertexes[v2], weight, COLOR.GREY))\r\n        draw();\r\n    };\r\n    function kEdge() {\r\n        this.begin = 0\r\n        this.end = 0\r\n        this.weight = 0\r\n    }\r\n    function find(parent, n) {\r\n        while(parent[n] > 0) {\r\n            n = parent[n]\r\n        }\r\n        return n\r\n    }\r\n    let getEdge = function (v1,v2,edges) {\r\n        let num\r\n        edges.forEach((value, index, array)=>{\r\n            if((array[index].v1 == v1 || array[index].v1 == v2)\r\n                && (array[index].v2 == v1 || array[index].v2 == v2)) {\r\n                num = index\r\n            }\r\n        })\r\n        return num\r\n    }\r\n\r\n    const dijkstra = ()=>{\r\n        let frame\r\n        let execution = \"<br>\"\r\n        let instruction = \"Visited vertexes: \"\r\n        let path = new Array(vertexes.length)\r\n        let v = sourcePoint\r\n        let graph = new Graph(vertexes.length)\r\n        let vertexesColor = new Array(vertexes.length)\r\n        let edgesColor = new Array(edges.length)\r\n        let distance = new Array(vertexes.length)\r\n        for(let i = 0; i < vertexes.length; i++) {\r\n            distance[i] = INF\r\n        }\r\n        for(let i = 0; i < vertexes.length; i++) {\r\n            vertexesColor[i] = COLOR.PINK\r\n        }\r\n        for(let i = 0; i < edges.length; i++) {\r\n            edgesColor[i] = COLOR.GREY\r\n        }\r\n        graph.insert(edges)\r\n/*        if(v< 0 || v >= vertexCount || isNaN(v)) {\r\n            alert(\"Vertex does not exist\")\r\n            return\r\n        }\r\n        if(graph.n == 0) {\r\n            alert(\"Graph does not exist\")\r\n            return\r\n        }\r\n        let connected = utils.dfs(v,graph.visited,graph.mat,graph.n)\r\n        if(!connected) {\r\n            alert(\"Graph is not connected\")\r\n            return\r\n        }\r\n        disableButtons()*/\r\n        for(let i = 0; i < graph.n; i++) {\r\n            graph.visited[i] = 0\r\n        }\r\n        graph.dist[v] = 0\r\n        frame = new Frame(vertexes.length,edges.length)\r\n        frame.recordDistance(distance)\r\n        frame.record(vertexesColor,edgesColor,instruction,execution)\r\n        animation.push(frame)\r\n        distance[v] = 0\r\n        for(let i = 0; i < graph.n; i++) {\r\n            let minDist = INF\r\n            let minVertex\r\n            execution += \"Finding the vertex closest to the source point<br>\"\r\n            for(let j = 0; j < graph.n; j++) {\r\n                if(!graph.visited[j] && (graph.dist[j] < minDist)) {\r\n                    let color = vertexesColor[j]\r\n                    vertexesColor[j] = COLOR.YELLOW\r\n                    frame = new Frame(vertexes.length,edges.length)\r\n                    frame.recordDistance(distance)\r\n                    frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                    animation.push(frame)\r\n                    vertexesColor[j] = color\r\n                    minDist = graph.dist[j]\r\n                    minVertex = j\r\n                }\r\n            }\r\n            instruction += minVertex+\" \"\r\n            graph.visited[minVertex] = 1\r\n            vertexesColor[minVertex] = COLOR.GREEN\r\n            edgesColor[getEdge(minVertex,path[minVertex],edges)] = COLOR.GREEN\r\n            execution += \"Adding \"+minVertex+\" to the vertexes set<br><br>\"\r\n            frame = new Frame(vertexes.length,edges.length)\r\n            frame.recordDistance(distance)\r\n            frame.record(vertexesColor,edgesColor,instruction,execution)\r\n            animation.push(frame)\r\n            for(let j = 0; j < graph.n; j++) {\r\n                if(!graph.visited[j] && (minDist + graph.mat[minVertex][j]) < graph.dist[j]) {\r\n                    graph.dist[j] = minDist + graph.mat[minVertex][j]\r\n                    path[j] = minVertex\r\n                    distance[j] = graph.dist[j]\r\n                    execution += \"The distance from vertex \"+j+\" to source point is updated to \"+graph.dist[j]+\"<br>\"\r\n                    let color = vertexesColor[j]\r\n                    vertexesColor[j] = COLOR.BLUE\r\n                    frame = new Frame(vertexes.length,edges.length)\r\n                    frame.recordDistance(distance)\r\n                    frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                    animation.push(frame)\r\n                    vertexesColor[j] = color\r\n                    frame = new Frame(vertexes.length,edges.length)\r\n                    frame.recordDistance(distance)\r\n                    frame.record(vertexesColor,edgesColor,instruction,execution)\r\n                    animation.push(frame)\r\n                }\r\n            }\r\n            execution += \"<br>\"\r\n        }\r\n        for(let i = 0; i < graph.n; i++) {\r\n            let temp = i\r\n            execution += \"The shortest path from \"+i+\" to \"+v+\" is \"+temp\r\n            while(temp!=v) {\r\n                temp = path[temp]\r\n                execution += \"-->\"+temp\r\n            }\r\n            execution += \"<br>\"\r\n        }\r\n        frame = new Frame(vertexes.length,edges.length)\r\n        frame.recordDistance(distance)\r\n        frame.record(vertexesColor,edgesColor,instruction,execution)\r\n        animation.push(frame)\r\n        animate(animation);\r\n    }\r\n\r\n    return (\r\n        <Layout>\r\n            <Row className=\"no-gutter\">\r\n                <Col md={7} className=\"bg-secondary bg-opacity-10\">\r\n                    <ButtonGroup aria-label=\"Basic example\" className=\"p-2\">\r\n                        <Button variant=\"secondary\" onClick={handleClearCanvas}>CLEAR</Button>\r\n                        <Button variant=\"secondary\" onClick={handleCanvasClick}>VERTEX</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"EDGE\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" onChange={inputChange1}/>\r\n                            <input placeholder=\"vertex2\" onChange={inputChange2}/>\r\n                            <input placeholder=\"weight\" onChange={inputChange3}/>\r\n                            <Dropdown.Item onClick={handleEdgeClick}>GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n                        <DropdownButton as={ButtonGroup} title=\"GRAPH\" variant=\"secondary\">\r\n                            <input placeholder=\"count\" onChange={inputChange4}/>\r\n                            <Dropdown.Item onClick={handleGraphClick}>GENERATE</Dropdown.Item>\r\n                        </DropdownButton>\r\n\r\n                        <Button variant=\"secondary\" onClick={realDistance}>REAL DISTANCE</Button>\r\n                        <DropdownButton as={ButtonGroup} title=\"ANIMATION\" variant=\"secondary\">\r\n                            <input placeholder=\"vertex1\" onChange={inputSourcePoint}/>\r\n                            <Dropdown.Item onClick={dijkstra}>START</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </ButtonGroup>\r\n                    <div>\r\n                        <canvas\r\n                            className=\"App-canvas\"\r\n                            ref={canvas}\r\n                            width={canvasWidth}\r\n                            height={canvasHeight}\r\n                            onMouseDown={handleMouseDown}\r\n                            onMouseMove={handleMouseMove}\r\n                            onMouseUp={handleMouseUp}\r\n                            onMouseOut={handleMouseOut}/>\r\n                        <div className=\"text-center\">\r\n                            <input type=\"range\" min={0} defaultValue={0} className=\"p-3 slider\" id=\"slider\" onInput={sliderChange}/>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"bg-secondary bg-opacity-10\">\r\n                        <div id=\"instruction\" dangerouslySetInnerHTML={{__html:instruction}}></div>\r\n                        <div id=\"execution\" dangerouslySetInnerHTML={{__html:execution}}></div>\r\n                    </div>\r\n                </Col>\r\n                <Col md={5} className=\"bg-secondary bg-opacity-25\">\r\n                    <div className=\"bg-secondary bg-opacity-25\">\r\n                        <h3 className=\"text-secondary p-3\">Dijkstra's algorithm</h3>\r\n                    </div>\r\n                    <div id=\"code\">\r\n                        <pre className=\"p-3\">\r\n    {`\r\nfunction Dijkstra(v,graph) {\r\n    graph.dist[v] = 0\r\n    for(let i = 0; i < graph.n; i++) {\r\n        let minDist = Infinity\r\n        let minVertex\r\n        for(let j = 0; j < graph.n; j++) {\r\n            if(!graph.visited[j] && (graph.dist[j] < minDist)) {\r\n                minDist = graph.dist[j]\r\n                minVertex = j\r\n            }\r\n        }\r\n        visited[minVertex] = 1\r\n        for(let j = 0; j < graph.n; j++) {\r\n            if(!graph.visited[j] && (minDist + graph.mat[minVertex][j]) < graph.dist[j]) {\r\n                graph.dist[j] = minDist + graph.mat[minVertex][j]\r\n            }\r\n        }\r\n    }\r\n}\r\n    `}\r\n</pre>\r\n                    </div>\r\n                </Col>\r\n            </Row>\r\n\r\n        </Layout>\r\n    )\r\n}\r\n\r\nexport default Dijkstra;","import React from \"react\";\r\nimport { HashRouter, Routes, Route } from \"react-router-dom\";\r\nimport Kruskal from \"./kruskal\";\r\nimport HomePage from \"./home\";\r\nimport BFS from \"./bfs\";\r\nimport DFS from \"./dfs\";\r\nimport Prim from \"./prim\";\r\nimport Dijkstra from \"./dijkstra\";\r\nconst TheRoutes = () => {\r\n    return (\r\n        <HashRouter>\r\n            <Routes>\r\n                <Route path=\"/\" element={<HomePage/>} />\r\n                <Route path=\"/bfs\" element={<BFS/>}/>\r\n                <Route path=\"/dfs\" element={<DFS/>}/>\r\n                <Route path=\"/kruskal\" element={<Kruskal/>}/>\r\n                <Route path=\"/prim\" element={<Prim/>}/>\r\n                <Route path=\"/dijkstra\" element={<Dijkstra/>}/>\r\n            </Routes>\r\n        </HashRouter>\r\n    );\r\n};\r\n\r\nexport default TheRoutes;","import React from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport TheRoutes from \"./pages/routes\";\nfunction App() {\n  return (\n      <TheRoutes/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}